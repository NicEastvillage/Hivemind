// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct SphereShape : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SphereShape GetRootAsSphereShape(ByteBuffer _bb) { return GetRootAsSphereShape(_bb, new SphereShape()); }
  public static SphereShape GetRootAsSphereShape(ByteBuffer _bb, SphereShape obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SphereShape __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Diameter { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<SphereShape> CreateSphereShape(FlatBufferBuilder builder,
      float diameter = 0.0f) {
    builder.StartObject(1);
    SphereShape.AddDiameter(builder, diameter);
    return SphereShape.EndSphereShape(builder);
  }

  public static void StartSphereShape(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddDiameter(FlatBufferBuilder builder, float diameter) { builder.AddFloat(0, diameter, 0.0f); }
  public static Offset<SphereShape> EndSphereShape(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SphereShape>(o);
  }
};


}
