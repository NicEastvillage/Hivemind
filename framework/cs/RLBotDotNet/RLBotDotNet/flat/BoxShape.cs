// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

public struct BoxShape : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BoxShape GetRootAsBoxShape(ByteBuffer _bb) { return GetRootAsBoxShape(_bb, new BoxShape()); }
  public static BoxShape GetRootAsBoxShape(ByteBuffer _bb, BoxShape obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BoxShape __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Length { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Width { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Height { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<BoxShape> CreateBoxShape(FlatBufferBuilder builder,
      float length = 0.0f,
      float width = 0.0f,
      float height = 0.0f) {
    builder.StartObject(3);
    BoxShape.AddHeight(builder, height);
    BoxShape.AddWidth(builder, width);
    BoxShape.AddLength(builder, length);
    return BoxShape.EndBoxShape(builder);
  }

  public static void StartBoxShape(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddLength(FlatBufferBuilder builder, float length) { builder.AddFloat(0, length, 0.0f); }
  public static void AddWidth(FlatBufferBuilder builder, float width) { builder.AddFloat(1, width, 0.0f); }
  public static void AddHeight(FlatBufferBuilder builder, float height) { builder.AddFloat(2, height, 0.0f); }
  public static Offset<BoxShape> EndBoxShape(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BoxShape>(o);
  }
};


}
