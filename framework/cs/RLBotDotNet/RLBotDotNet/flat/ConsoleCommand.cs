// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rlbot.flat
{

using global::System;
using global::FlatBuffers;

/// A console command which we will try to execute inside Rocket League.
/// See https://github.com/RLBot/RLBot/wiki/Console-Commands for a list of known commands.
public struct ConsoleCommand : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ConsoleCommand GetRootAsConsoleCommand(ByteBuffer _bb) { return GetRootAsConsoleCommand(_bb, new ConsoleCommand()); }
  public static ConsoleCommand GetRootAsConsoleCommand(ByteBuffer _bb, ConsoleCommand obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ConsoleCommand __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Command { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCommandBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<ConsoleCommand> CreateConsoleCommand(FlatBufferBuilder builder,
      StringOffset commandOffset = default(StringOffset)) {
    builder.StartObject(1);
    ConsoleCommand.AddCommand(builder, commandOffset);
    return ConsoleCommand.EndConsoleCommand(builder);
  }

  public static void StartConsoleCommand(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCommand(FlatBufferBuilder builder, StringOffset commandOffset) { builder.AddOffset(0, commandOffset.Value, 0); }
  public static Offset<ConsoleCommand> EndConsoleCommand(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ConsoleCommand>(o);
  }
};


}
